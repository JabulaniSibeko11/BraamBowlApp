@model CheckoutViewModel

@{
    ViewBag.Title = "Checkout - @Model.ShopName";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - @Model.Shop_Name</title>
    <link href="~/css/menucss.css" rel="stylesheet" />
    <style>
        .checkout-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .order-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .quantity-btn {
            background: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
        }

            .quantity-btn:disabled {
                background: #ccc;
                cursor: not-allowed;
            }

        .place-order-btn {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .error-message {
            color: #e74c3c;
            margin: 10px 0;
        }

        .success-message {
            color: #27ae60;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="checkout-container">
        <h1>Checkout - @Model.Shop_Name</h1>
        <a href="/Menu/@Model.ShopId" class="back-btn">← Back to Menu</a>

        @if (TempData["ErrorMessage"] != null)
        {
            <p class="error-message">@TempData["ErrorMessage"]</p>
        }
        @if (TempData["SuccessMessage"] != null)
        {
            <p class="success-message">@TempData["SuccessMessage"]</p>
        }

        @if (Model.Items.Any())
        {
            <form asp-controller="Home" asp-action="PlaceOrder" asp-route-shopId="@Model.ShopId" method="post">
                @Html.AntiForgeryToken()
                <div class="order-items">
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <div class="order-item">
                            <div>
                                <h3>@Model.Items[i].Name</h3>
                                <p>R @Model.Items[i].Price.ToString("F2") each</p>
                            </div>
                            <div class="quantity-control">
                                <button type="button" class="quantity-btn decrease" data-index="@i">-</button>
                                <input type="number" name="Items[@i].Quantity" value="@Model.Items[i].Quantity" min="1" class="quantity-input" readonly />
                                <input type="hidden" name="Items[@i].MenuItemId" value="@Model.Items[i].MenuItemId" />
                                <input type="hidden" name="Items[@i].Name" value="@Model.Items[i].Name" />
                                <input type="hidden" name="Items[@i].Price" value="@Model.Items[i].Price" />
                                <button type="button" class="quantity-btn increase" data-index="@i">+</button>
                            </div>
                            <div>R <span class="item-total">@((Model.Items[i].Price * Model.Items[i].Quantity).ToString("F2"))</span></div>
                        </div>
                    }
                </div>
                <div class="order-summary">
                    <h3>Total: R <span id="orderTotal">@Model.TotalAmount.ToString("F2")</span></h3>
                    <button type="submit" class="place-order-btn">Place Order</button>
                </div>
            </form>
        }
        else
        {
            <p>No items in your cart.</p>
        }
    </div>

    <script>
        // Initialize cart from sessionStorage
        let cart = JSON.parse(sessionStorage.getItem('cart')) || [];

        // Update total when quantity changes
        function updateOrderTotal() {
            let total = 0;
            document.querySelectorAll('.order-item').forEach((item, index) => {
                const quantity = parseInt(item.querySelector('.quantity-input').value);
                const price = parseFloat(item.querySelector('input[name$=".Price"]').value);
                const itemTotal = quantity * price;
                item.querySelector('.item-total').textContent = itemTotal.toFixed(2);
                total += itemTotal;
            });
            document.getElementById('orderTotal').textContent = total.toFixed(2);
        }

        // Handle quantity changes
        document.querySelectorAll('.quantity-btn').forEach(button => {
            button.addEventListener('click', () => {
                const index = parseInt(button.getAttribute('data-index'));
                const input = document.querySelector(`input[name="Items[${index}].Quantity"]`);
                let quantity = parseInt(input.value);

                if (button.classList.contains('increase')) {
                    quantity++;
                } else if (button.classList.contains('decrease') && quantity > 1) {
                    quantity--;
                }

                input.value = quantity;
                updateOrderTotal();

                // Update cart in sessionStorage
                const menuItemId = parseInt(document.querySelector(`input[name="Items[${index}].MenuItemId"]`).value);
                const price = parseFloat(document.querySelector(`input[name="Items[${index}].Price"]`).value);
                const name = document.querySelector(`input[name="Items[${index}].Name"]`).value;

                // Remove existing items with this menuItemId
                cart = cart.filter(item => item.menuItemId !== menuItemId);

                // Add new items based on quantity
                for (let i = 0; i < quantity; i++) {
                    cart.push({ name: name, price: price, menuItemId: menuItemId });
                }

                sessionStorage.setItem('cart', JSON.stringify(cart));
            });
        });

        // Initial total calculation
        updateOrderTotal();

        // Handle form submission
        document.querySelector('form').addEventListener('submit', (e) => {
            const placeOrderBtn = document.querySelector('.place-order-btn');
            placeOrderBtn.disabled = true;
            placeOrderBtn.textContent = 'Processing...';
        });
    </script>
</body>
</html>