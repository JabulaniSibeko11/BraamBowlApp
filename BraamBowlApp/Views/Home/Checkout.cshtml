@model BraamBowlApp.Models.CheckoutViewModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - @Model.Shop_Name</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/checkout1.css" rel="stylesheet" />
    <style>
        .remove-btn {
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 2px 6px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 10px;
        }

            .remove-btn:hover {
                background: #c0392b;
            }
    </style>
</head>
<body>
    <div class="checkout-container glass-card">
        <h1 class="section-title">Checkout at @Model.Shop_Name 🛒</h1>
        <a href="/Menu/@Model.ShopId" class="back-btn">← Back to Menu</a>

        @if (TempData["ErrorMessage"] != null)
        {
            <p class="error-message">⚠️ @TempData["ErrorMessage"]</p>
        }
        @if (TempData["SuccessMessage"] != null)
        {
            <p class="success-message">🎉 @TempData["SuccessMessage"]</p>
        }

        <div class="employee-info">
            <h3>Employee Information 👤</h3>
            <p><strong>Name:</strong> @Model.EmployeeName @Model.EmployeeSurname</p>
            <p><strong>Current Balance:</strong> R @Model.EmployeeBalance.ToString("F2") 💰</p>
            <p><strong>Remaining Balance After Purchase:</strong> R <span id="remainingBalance">@((Model.EmployeeBalance - Model.TotalAmount).ToString("F2"))</span> 💸</p>
        </div>

        @if (Model.Items.Any())
        {
            <form asp-controller="Home" asp-action="PlaceOrder" asp-route-shopId="@Model.ShopId" method="post" id="orderForm">
                @Html.AntiForgeryToken()
                <div class="order-items">
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <div class="order-item" data-index="@i">
                            <div>
                                <h3>@Model.Items[i].Name 🍽️</h3>
                                <p>R @Model.Items[i].Price.ToString("F2") each</p>
                            </div>
                            <div class="quantity-control">
                                <button type="button" class="quantity-btn decrease" data-index="@i">-</button>
                                <input type="number" name="Items[@i].Quantity" value="@Model.Items[i].Quantity" min="1" class="quantity-input" readonly />
                                <input type="hidden" name="Items[@i].MenuItemId" value="@Model.Items[i].MenuItemId" />
                                <input type="hidden" name="Items[@i].Name" value="@Model.Items[i].Name" />
                                <input type="hidden" name="Items[@i].Price" value="@Model.Items[i].Price" />
                                <button type="button" class="quantity-btn increase" data-index="@i">+</button>
                            </div>
                            <div>
                                R <span class="item-total">@((Model.Items[i].Price * Model.Items[i].Quantity).ToString("F2"))</span>
                                <button type="button" class="remove-btn" data-index="@i">Remove</button>
                            </div>
                        </div>
                    }
                </div>
                <div class="order-summary">
                    <h3>Total: R <span id="orderTotal">@Model.TotalAmount.ToString("F2")</span> 🧾</h3>
                    <input type="hidden" name="DeliveryAddress" id="deliveryAddressInput" value="@Model.DeliveryAddress" />
                    <button type="button" class="place-order-btn" onclick="showAddressModal()">Place Order 🚚</button>
                </div>
            </form>
        }
        else
        {
            <p>🛒 No items in your cart.</p>
        }
    </div>

    <div id="addressModal" class="modal">
        <div class="modal-content">
            <h3>Confirm Delivery Address 📍</h3>
            <p>Current Address: <span id="currentAddress">@Model.DeliveryAddress</span></p>
            <input type="text" id="newAddress" placeholder="Enter new address (optional)" />
            <div>
                <button class="confirm-btn" onclick="confirmAddress()">Confirm ✅</button>
                <button class="cancel-btn" onclick="closeModal()">Cancel ❌</button>
            </div>
        </div>
    </div>

    <script>
        let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
        const employeeBalance = @Model.EmployeeBalance;

        function updateOrderTotal() {
            let total = 0;
            const orderItems = document.querySelectorAll('.order-item');
            orderItems.forEach((item, index) => {
                const quantity = parseInt(item.querySelector('.quantity-input').value);
                const price = parseFloat(item.querySelector('input[name$=".Price"]').value);
                const itemTotal = quantity * price;
                item.querySelector('.item-total').textContent = itemTotal.toFixed(2);
                total += itemTotal;
            });
            document.getElementById('orderTotal').textContent = total.toFixed(2);
            const remainingBalance = employeeBalance - total;
            document.getElementById('remainingBalance').textContent = remainingBalance.toFixed(2);
        }

        // Ensure event listeners are attached after DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.quantity-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const index = parseInt(button.getAttribute('data-index'));
                    const input = document.querySelector(`input[name="Items[${index}].Quantity"]`);
                    let quantity = parseInt(input.value);

                    if (button.classList.contains('increase')) {
                        quantity++;
                    } else if (button.classList.contains('decrease') && quantity > 1) {
                        quantity--;
                    }

                    input.value = quantity;
                    updateOrderTotal();

                    const menuItemId = parseInt(document.querySelector(`input[name="Items[${index}].MenuItemId"]`).value);
                    const price = parseFloat(document.querySelector(`input[name="Items[${index}].Price"]`).value);
                    const name = document.querySelector(`input[name="Items[${index}].Name"]`).value;

                    cart = cart.filter(item => item.menuItemId !== menuItemId);
                    for (let i = 0; i < quantity; i++) {
                        cart.push({ name: name, price: price, menuItemId: menuItemId });
                    }

                    sessionStorage.setItem('cart', JSON.stringify(cart));
                });
            });

            document.querySelectorAll('.remove-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const index = parseInt(button.getAttribute('data-index'));
                    const menuItemId = parseInt(document.querySelector(`input[name="Items[${index}].MenuItemId"]`).value);
                    const price = parseFloat(document.querySelector(`input[name="Items[${index}].Price"]`).value);
                    const quantity = parseInt(document.querySelector(`input[name="Items[${index}].Quantity"]`).value);

                    // Remove the item from the cart
                    cart = cart.filter(item => item.menuItemId !== menuItemId);
                    sessionStorage.setItem('cart', JSON.stringify(cart));

                    // Remove the item from the DOM
                    const itemElement = button.closest('.order-item');
                    if (itemElement) {
                        itemElement.remove();
                        updateOrderTotal();
                        reindexItems();
                    }
                });
            });
        });

        function reindexItems() {
            const orderItems = document.querySelectorAll('.order-item');
            orderItems.forEach((item, index) => {
                item.setAttribute('data-index', index);
                item.querySelector('.quantity-btn.decrease').setAttribute('data-index', index);
                item.querySelector('.quantity-btn.increase').setAttribute('data-index', index);
                item.querySelector('.remove-btn').setAttribute('data-index', index);
                item.querySelector('input[name*="Items"]').name = `Items[${index}].Quantity`;
                item.querySelector('input[name*="MenuItemId"]').name = `Items[${index}].MenuItemId`;
                item.querySelector('input[name*="Name"]').name = `Items[${index}].Name`;
                item.querySelector('input[name*="Price"]').name = `Items[${index}].Price`;
            });
        }

        updateOrderTotal();

        function showAddressModal() {
            document.getElementById('addressModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('addressModal').style.display = 'none';
        }

        function confirmAddress() {
            const newAddress = document.getElementById('newAddress').value;
            const currentAddress = document.getElementById('currentAddress').textContent;
            const deliveryAddress = newAddress.trim() !== '' ? newAddress : currentAddress;
            document.getElementById('deliveryAddressInput').value = deliveryAddress;
            document.getElementById('orderForm').submit();
            const placeOrderBtn = document.querySelector('.place-order-btn');
            placeOrderBtn.disabled = true;
            placeOrderBtn.textContent = 'Processing... ⏳';
        }
    </script>
</body>
</html>