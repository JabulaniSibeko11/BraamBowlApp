@model BraamBowlApp.Models.DepositModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/Dashboard.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .deposit-container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .deposit-title {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .deposit-title::before {
                content: '';
                width: 4px;
                height: 24px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                border-radius: 2px;
            }

        .deposit-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

            .form-group label {
                font-weight: 500;
                color: #2c3e50;
                font-size: 14px;
            }

            .form-group input,
            .form-group select {
                padding: 12px 15px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s ease;
                font-family: 'Poppins', sans-serif;
            }

                .form-group input:focus,
                .form-group select:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                }

        .deposit-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            align-self: flex-start;
        }

            .deposit-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }

            .deposit-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .alert-success {
            background: #e8f5e8;
            color: #27ae60;
            border: none;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .text-danger {
            font-size: 12px;
            margin-top: 5px;
        }

        .test-mode-toggle {
            margin-bottom: 15px;
        }

        .processing {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="deposit-container">
        <h2 class="deposit-title">💳 Deposit to Cafeteria Account</h2>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }

        <!-- Test Mode Toggle (for development) -->
        <div class="test-mode-toggle">
            <label>
                <input type="checkbox" id="testMode" /> Enable Test Mode (Bypass Yoco)
            </label>
        </div>

        <form asp-action="Deposit" id="DepForm" method="post" class="deposit-form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Hidden field for payment token -->
            <input type="hidden" asp-for="PaymentToken" id="PaymentToken" />

            <div class="form-group">
                <label asp-for="DepositAmount" class="control-label">Deposit Amount (R)</label>
                <input asp-for="DepositAmount" id="DepositAmount" class="form-control" type="number" step="0.01" placeholder="250" min="250" />
                <span asp-validation-for="DepositAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentMethod" class="control-label">Payment Method</label>
                <select asp-for="PaymentMethod" class="form-control" asp-items="@(new SelectList(Model.PaymentMethods))">
                    <option value="">Select a payment method</option>
                </select>
                <span asp-validation-for="PaymentMethod" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="submit" id="SubmitBtn" class="deposit-btn">Deposit</button>
            </div>
        </form>
    </div>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
        <!-- Include the Yoco SDK in your web page -->
        <script src="https://js.yoco.com/sdk/v1/yoco-sdk-web.js"></script>

        <script>
            var yoco = new window.YocoSDK({
                publicKey: 'pk_test_38cef2e179qN7Lo0d864',
            });

            var checkoutButton = document.querySelector('#SubmitBtn');
            var testModeCheckbox = document.querySelector('#testMode');
            var form = document.querySelector('#DepForm');
            var paymentTokenField = document.querySelector('#PaymentToken');
            var depositAmountField = document.querySelector('#DepositAmount');
            var paymentMethodField = document.querySelector('#PaymentMethod');

            checkoutButton.addEventListener('click', function (event) {
                event.preventDefault(); // Prevent the form from being submitted immediately

                // Basic validation
                if (!depositAmountField.value || parseFloat(depositAmountField.value) < 250) {
                    alert('Please enter a valid deposit amount (minimum R250)');
                    return;
                }

                if (!paymentMethodField.value) {
                    alert('Please select a payment method');
                    return;
                }

                // Disable button and show processing state
                checkoutButton.disabled = true;
                checkoutButton.textContent = 'Processing...';
                form.classList.add('processing');

                if (testModeCheckbox && testModeCheckbox.checked) {
                    // Mock a successful Yoco response for testing
                    const mockToken = 'mock_token_' + new Date().getTime();
                    console.log("Test mode: Mock token generated: " + mockToken);

                    // Set the payment token in the hidden field
                    paymentTokenField.value = mockToken;

                    // Submit the form with the mock token
                    form.submit();
                } else {
                    // Use Yoco popup for real payment
                    yoco.showPopup({
                        amountInCents: Math.round(parseFloat(depositAmountField.value) * 100),
                        currency: 'ZAR',
                        name: 'Cafeteria Account Deposit',
                        description: 'Deposit to your cafeteria account',
                        callback: function (result) {
                            if (result.error) {
                                const errorMessage = result.error.message;
                                alert("Payment failed: " + errorMessage);

                                // Reset button state
                                checkoutButton.disabled = false;
                                checkoutButton.textContent = 'Deposit';
                                form.classList.remove('processing');
                            } else {
                                console.log("Card successfully tokenized: " + result.id);

                                // Set the payment token in the hidden field
                                paymentTokenField.value = result.id;

                                // Submit the form if payment is successful
                                form.submit();
                            }
                        }
                    });
                }
            });

            // Reset button state if form submission fails (page reloads)
            window.addEventListener('load', function () {
                checkoutButton.disabled = false;
                checkoutButton.textContent = 'Deposit';
                form.classList.remove('processing');
            });
        </script>
    }
</body>
</html>