@model OrderModel

@{
    ViewBag.Title = "Restaurant Menu";
    var shopId = ViewBag.ShopId;
    var shopName = ViewBag.ShopName;
    var categories = ViewBag.Categories as List<string> ?? new List<string>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@shopName Menu</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap">
    <link href="~/css/menu.css" rel="stylesheet" />
    <style>
        .cart-preview {
            display: none;
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 10px;
            min-width: 250px;
            z-index: 1000;
        }

        .cart-summary:hover .cart-preview {
            display: block;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
            border-bottom: 1px solid #e2e8f0;
        }

            .cart-item button {
                background: #e74c3c;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 2px 6px;
                cursor: pointer;
                font-size: 12px;
            }

                .cart-item button:hover {
                    background: #c0392b;
                }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="restaurant-title">🍽️ @shopName Menu</h1>
            <p class="restaurant-subtitle">Finger Lickin' Good - Braamfontein</p>
            <a href="/Restaurants" class="back-btn">← Back to Restaurants</a>
        </div>

        <div class="cart-summary" id="cartSummary">
            <span class="cart-icon">🛒</span>
            <span id="cartCount">0</span> items - R<span id="cartTotal">0.00</span>
            <div class="cart-preview" id="cartPreview"></div>
        </div>

        @if (categories.Any())
        {
            <div class="menu-categories">
                @foreach (var category in categories)
                {
                    var categoryId = category.ToLower().Replace(" ", "-");
                    var isActive = category == categories.First() ? "active" : "";
                    <button class="category-btn @isActive" data-category="@categoryId">
                        @switch (category)
                        {
                            case "Burgers":
                                <text>🍔 Burgers</text>
                                break;
                            case "Chicken":
                                <text>🍗 Chicken</text>
                                break;
                            case "Sides":
                                <text>🍟 Sides</text>
                                break;
                            case "Desserts":
                                <text>🍰 Desserts</text>
                                break;
                            case "Drinks":
                                <text>🥤 Drinks</text>
                                break;
                            default:
                                <text>@category</text>
                                break;
                        }
                    </button>
                }
            </div>

            @foreach (var category in categories)
            {
                var categoryId = category.ToLower().Replace(" ", "-");
                var isActive = category == categories.First() ? "active" : "";
                <div id="@categoryId" class="menu-section @isActive">
                    <div class="menu-grid">
                        @foreach (var item in Model.Items.Where(i => i.Category == category))
                        {
                            <div class="menu-item">
                                <div class="item-header">
                                    <div>
                                        <h3 class="item-name">@item.Name</h3>
                                        <div class="item-details">
                                            @if (!string.IsNullOrEmpty(item.Tags))
                                            {
                                                foreach (var tag in item.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <span class="item-tag">@tag.Trim()</span>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="item-price">R @item.Price.ToString("F2")</div>
                                </div>
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <p class="item-description">@item.Description</p>
                                }
                                <button class="add-to-cart" data-item-name="@item.Name" data-item-price="@item.Price" data-item-id="@item.MenuItemId">Add to Cart</button>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p class="no-items">No menu items available for this restaurant.</p>
        }
    </div>

    <script>
        let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
        let cartTotal = cart.reduce((sum, item) => sum + item.price, 0);
        const shopId = @shopId;

        updateCartSummary();

        @if (TempData["ClearCart"] != null)
        {
            <text>
                sessionStorage.removeItem('cart');
            cart = [];
            cartTotal = 0;
            updateCartSummary();
            </text>
        }

            document.querySelectorAll('.category-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const categoryId = button.getAttribute('data-category');
                    showCategory(categoryId);
                });
            });

        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', () => {
                const itemName = button.getAttribute('data-item-name');
                const price = parseFloat(button.getAttribute('data-item-price'));
                const menuItemId = parseInt(button.getAttribute('data-item-id'));
                addToCart(itemName, price, menuItemId);
            });
        });

        function showCategory(categoryId) {
            document.querySelectorAll('.menu-section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(categoryId).classList.add('active');

            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.getAttribute('data-category') === categoryId) {
                    btn.classList.add('active');
                }
            });
        }

        function addToCart(itemName, price, menuItemId) {
            const cartItem = {
                Item_Name: itemName,
                price: price,
                menuItemId: menuItemId
            };

            cart.push(cartItem);
            cartTotal += price;
            sessionStorage.setItem('cart', JSON.stringify(cart));
            updateCartSummary();

            const button = event.target;
            const originalText = button.textContent;
            const originalBackground = button.style.background;

            button.textContent = 'Added! ✓';
            button.style.background = 'linear-gradient(45deg, #27ae60, #2ecc71)';
            button.disabled = true;

            setTimeout(() => {
                button.textContent = originalText;
                button.style.background = originalBackground;
                button.disabled = false;
            }, 1000);
        }

        function updateCartSummary() {
            const cartSummary = document.getElementById('cartSummary');
            const cartCount = document.getElementById('cartCount');
            const cartTotalElement = document.getElementById('cartTotal');
            const cartPreview = document.getElementById('cartPreview');

            cartCount.textContent = cart.length;
            cartTotalElement.textContent = cartTotal.toFixed(2);
            cartSummary.classList.toggle('show', cart.length > 0);

            // Update cart preview
            cartPreview.innerHTML = '';
            if (cart.length > 0) {
                cart.forEach((item, index) => {
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                                <span>${item.Item_Name} - R${item.price.toFixed(2)}</span>
                                <button onclick="removeFromCart(${index})">Remove</button>
                            `;
                    cartPreview.appendChild(cartItem);
                });
            } else {
                cartPreview.innerHTML = '<span class="text-gray-500">Cart is empty</span>';
            }
        }

        function removeFromCart(index) {
            if (index >= 0 && index < cart.length) {
                cartTotal -= cart[index].price;
                cart.splice(index, 1);
                sessionStorage.setItem('cart', JSON.stringify(cart));
                updateCartSummary();
            }
        }

        function clearCart() {
            cart = [];
            cartTotal = 0;
            sessionStorage.removeItem('cart');
            updateCartSummary();
        }

        document.getElementById('cartSummary').addEventListener('click', () => {
            if (cart.length > 0) {
                const cartSummary = document.getElementById('cartSummary');
                cartSummary.innerHTML = '<span class="cart-icon">⏳</span> Processing...';

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/Checkout/${shopId}`;

                cart.forEach(item => {
                    const itemInput = document.createElement('input');
                    itemInput.type = 'hidden';
                    itemInput.name = 'cartItems';
                    itemInput.value = JSON.stringify({
                        Item_Name: item.Item_Name,
                        price: item.price,
                        menuItemId: item.menuItemId
                    });
                    form.appendChild(itemInput);
                });

                const shopIdInput = document.createElement('input');
                shopIdInput.type = 'hidden';
                shopIdInput.name = 'shopId';
                shopIdInput.value = shopId;
                form.appendChild(shopIdInput);

                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                document.body.appendChild(form);
                form.submit();
            } else {
                alert('Your cart is empty. Please add some items before proceeding to checkout.');
            }
        });

        function addCartManagementButtons() {
            const cartSummary = document.getElementById('cartSummary');
            const clearButton = document.createElement('button');
            clearButton.textContent = '🗑️';
            clearButton.title = 'Clear Cart';
            clearButton.style.cssText = `
                        position: absolute;
                        top: 5px;
                        right: 5px;
                        background: #e74c3c;
                        color: white;
                        border: none;
                        border-radius: 50%;
                        width: 25px;
                        height: 25px;
                        font-size: 12px;
                        cursor: pointer;
                        display: none;
                    `;

            clearButton.addEventListener('click', (e) => {
                e.stopPropagation();
                if (confirm('Are you sure you want to clear your cart?')) {
                    clearCart();
                }
            });

            cartSummary.appendChild(clearButton);

            const originalUpdateCartSummary = updateCartSummary;
            updateCartSummary = function () {
                originalUpdateCartSummary();
                clearButton.style.display = cart.length > 0 ? 'block' : 'none';
            };
        }

        document.addEventListener('DOMContentLoaded', () => {
            addCartManagementButtons();
        });

        window.addEventListener('pageshow', (event) => {
            if (event.persisted) {
                cart = JSON.parse(sessionStorage.getItem('cart')) || [];
                cartTotal = cart.reduce((sum, item) => sum + item.price, 0);
                updateCartSummary();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'c' || e.key === 'C') {
                if (e.ctrlKey && cart.length > 0) {
                    e.preventDefault();
                    if (confirm('Clear cart? (Ctrl+C)')) {
                        clearCart();
                    }
                }
            }
            if (e.key === 'Enter' && e.ctrlKey && cart.length > 0) {
                e.preventDefault();
                document.getElementById('cartSummary').click();
            }
        });
    </script>
</body>
</html>